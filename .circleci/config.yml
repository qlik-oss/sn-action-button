version: 2

defaults: &defaults
  working_directory: ~/action-button
  # Available images https://hub.docker.com/r/circleci/node/tags/

aliases:
  - &restore_yarn_cache
    name: Restore yarn cache
    keys:
      - yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - yarn-packages-{{ .Branch }}
      - yarn-packages-
  - &save_yarn_cache
    name: Save yarn cache
    paths:
      - ~/.cache/yarn
    key: yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
  - &filter_master
    branches:
      only: master
  - &attach
    at: ~/project

jobs:
  install:
    <<: *defaults
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache: *restore_yarn_cache
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - save_cache: *save_yarn_cache
      - store_artifacts:
          path: package.json
      - persist_to_workspace:
          root: ~/action-button
          paths:
            - .

  build:
    <<: *defaults
    docker:
      - image: cimg/node:20.5.0-browsers
      - image: mcr.microsoft.com/playwright:focal
    steps:
      - attach_workspace:
          at: ~/action-button
      - run:
          name: Build
          command: yarn run build
      - run:
          name: Lint
          command: yarn run lint
      - run:
          name: Update spec
          command: yarn run spec
      - run:
          name: Run unit tests and upload to coveralls
          command: |
            yarn test:unit --runInBand --coverage --reporters=default --reporters=jest-junit
            if [ ! -z "$COVERALLS_REPO_TOKEN" ]; then
              echo "Uploading coverage results to coveralls.io..."
              cat ./coverage/lcov.info | npx coveralls
            fi
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./coverage/junit/
      - run:
          name: Install Playwright supported browsers
          command: npx playwright install
      - run:
          name: Rendering tests
          command: yarn test:rendering
      - store_artifacts:
          path: test/rendering/action-button.render.ts-snapshots
      - store_artifacts:
          path: test/rendering/artifacts
      - store_artifacts:
          path: test/rendering/test-report
      - persist_to_workspace:
          root: ~/action-button
          paths:
            - dist
            - package.json
            - core

  # publish-dev:
  #   <<: *defaults
  #   docker:
  #     - image: circleci/node:16.7.0
  #   steps:
  #     - attach_workspace:
  #         at: ~/action-button
  #     - run: mv ./dist sn-action-button && zip -r "sn-action-button.zip" "./sn-action-button"
  #     - store_artifacts:
  #         path: ./sn-action-button.zip

  publish:
    <<: *defaults
    docker:
      - image: cimg/node:20.5.0
    steps:
      - attach_workspace:
          at: ~/action-button
      - run:
          name: Setup npm
          command: |
            set -eo pipefail
            # Amend auth token for access to public npm registry for @nebula.js packages
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: Publish
          command: |
            set -euo pipefail
            PROJ_VER=v$(cat package.json | jq -r '.version')
            TAG_NAME=$(git tag --points-at HEAD)

            if [ "$TAG_NAME" == "$PROJ_VER" ]
            then
              echo "Running >> npm publish"
              npm publish
            fi

  api-governance:
    machine:
      image: ubuntu-2004:current
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Create version.txt
          command: |
            set -x
            if [ -n "${CIRCLE_TAG}" ]; then
                version=${CIRCLE_TAG#v}
            else
                version=$(git describe --tags --abbrev=7 --match "v*")
                version=${version#v}
            fi
            echo "$version" > ./version.txt
            echo "Building $version"
      - run:
          name: Prepare API Compliance
          command: |
            docker pull ghcr.io/qlik-download/api-compliance
            docker create -v /specs --name specs alpine:3.4 /bin/true
            docker cp ./api-specifications/properties.json specs:/specs

      - run:
          name: Run API Compliance
          command: >
            VER=$(cat ./version.txt)

            docker run --volumes-from specs
            -e SPEC_PATHS="a8ca346c-62df-4988-b040-59962008eeeb@/specs/properties.json"
            -e COMMIT_SHA="$CIRCLE_SHA1"
            -e RELEASE_TAG="$VER"
            -e CREDENTIALS_S3_SECRETKEY="$APICULTURIST_S3"
            -e CREDENTIALS_GITHUB="$APICULTURIST_GITHUB"
            -e CREDENTIALS_COLONY="$APICULTURIST_TOKEN"
            ghcr.io/qlik-download/api-compliance

workflows:
  version: 2
  build-all:
    jobs:
      - install
      - build:
          requires:
            - install
      - api-governance:
          context: api-compliance
          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/
            tags:
              only:
                - /v.*/
      # - publish-dev:
      #     requires:
      #       - build
      - publish:
          requires:
            - build
            - api-governance
          filters:
            branches:
              only:
                - master
